'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createDecoratedClass = (function () { function defineProperties(target, descriptors, initializers) { for (var i = 0; i < descriptors.length; i++) { var descriptor = descriptors[i]; var decorators = descriptor.decorators; var key = descriptor.key; delete descriptor.key; delete descriptor.decorators; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor || descriptor.initializer) descriptor.writable = true; if (decorators) { for (var f = 0; f < decorators.length; f++) { var decorator = decorators[f]; if (typeof decorator === 'function') { descriptor = decorator(target, key, descriptor) || descriptor; } else { throw new TypeError('The decorator for method ' + descriptor.key + ' is of the invalid type ' + typeof decorator); } } if (initializers) initializers[key] = descriptor.initializer; } Object.defineProperty(target, key, descriptor); } } return function (Constructor, protoProps, staticProps, protoInitializers, staticInitializers) { if (protoProps) defineProperties(Constructor.prototype, protoProps, protoInitializers); if (staticProps) defineProperties(Constructor, staticProps, staticInitializers); return Constructor; }; })();

var _assert = require('assert');

var _assert2 = _interopRequireWildcard(_assert);

var _memoize = require('../');

var _memoize2 = _interopRequireWildcard(_memoize);

describe('memoize getter/method decorator', function () {
  var A = (function () {
    function A() {
      var value = arguments[0] === undefined ? 42 : arguments[0];

      _classCallCheck(this, A);

      this.computedCount = 0;
      this.value = value;
    }

    _createDecoratedClass(A, [{
      key: 'expensiveValue',
      decorators: [_memoize2['default']],
      get: function () {
        this.computedCount += 1;
        return this.value;
      }
    }, {
      key: 'expensiveMethod',
      decorators: [_memoize2['default']],
      value: function expensiveMethod() {
        this.computedCount += 1;
        return this.value + 1;
      }
    }]);

    return A;
  })();

  it('computes class getter only once and memoizes result for future access', function () {
    var a = new A();
    _assert2['default'](a.computedCount === 0);
    _assert2['default'](a.expensiveValue === 42);
    _assert2['default'](a.computedCount === 1);
    _assert2['default'](a.expensiveValue === 42);
    _assert2['default'](a.computedCount === 1);
  });

  it('computes class method only once and memoizes result for future access', function () {
    var a = new A();
    _assert2['default'](a.computedCount === 0);
    _assert2['default'](a.expensiveMethod() === 43);
    _assert2['default'](a.computedCount === 1);
    _assert2['default'](a.expensiveMethod() === 43);
    _assert2['default'](a.computedCount === 1);
  });

  it('does not override memoized values from different methods', function () {
    var a = new A(41);
    _assert2['default'](a.expensiveValue, 41);
    var b = new A(42);
    _assert2['default'](b.expensiveValue, 42);
    _assert2['default'](a.expensiveValue, 41);
    _assert2['default'](b.expensiveValue, 42);
  });

  it('throws if applied on a method of more than zero arguments', function () {
    _assert2['default'].throws(function () {
      var A = (function () {
        function A() {
          _classCallCheck(this, A);
        }

        _createDecoratedClass(A, [{
          key: 'method',
          decorators: [_memoize2['default']],
          value: function method(a) {}
        }]);

        return A;
      })();
    }, /@memoize decorator can only be applied to methods of zero arguments/);
  });
});
